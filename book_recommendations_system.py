import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os

# Load environment variables from the .env file
load_dotenv()

# Fetch the API key from the environment variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

def load_options(file_path):
    with open(file_path, "r", encoding="utf-8") as file:
        options = [line.strip() for line in file.readlines()]
    return options

genre_options = load_options("genre_options.txt")
reading_habits_options = load_options("reading_habits_options.txt")

# Kitap Ã¶neri fonksiyonu
def recommend_books(genre, recent_books, reading_habits, favorite_author):
    prompt = f"""
    Bir kitap eleÅŸtirmeni gibi davran ve aÅŸaÄŸÄ±daki bilgilere gÃ¶re kitap Ã¶nerisi yap:
    - TÃ¼r: {genre}
    - En son okunan kitaplar: {recent_books}
    - Okuma alÄ±ÅŸkanlÄ±klarÄ±: {reading_habits}
    - Favori yazar: {favorite_author}

    LÃ¼tfen 3 kitap Ã¶ner ve her bir kitap iÃ§in ÅŸu formatta yanÄ±t ver:
    Kitap AdÄ±: [Kitap adÄ±]
    AÃ§Ä±klama: [KÄ±sa aÃ§Ä±klama]
    """
    response = model.generate_content(prompt)
    return response.text

# Kitap Ã¶nerilerini ayrÄ±ÅŸtÄ±rma
def parse_recommendations(response_text):
    recommendations = []
    books = response_text.split("\n\n")
    for book in books:
        lines = book.split("\n")
        book_data = {}
        for line in lines:
            if line.startswith("Kitap AdÄ±:"):
                book_data["name"] = line.replace("Kitap AdÄ±:", "").strip()
            elif line.startswith("AÃ§Ä±klama:"):
                book_data["summary"] = line.replace("AÃ§Ä±klama:", "").strip()
        if book_data:
            recommendations.append(book_data)
    return recommendations

# Streamlit ArayÃ¼zÃ¼
st.title("ğŸ“š AkÄ±llÄ± Kitap Ã–neri Sistemi")

if "step" not in st.session_state:
    st.session_state.step = 1
    st.session_state.answers = {}

if st.session_state.step == 1:
    st.subheader("1. Hangi tÃ¼rde kitaplar okumayÄ± seversiniz?")
    genre = st.selectbox("TÃ¼r seÃ§in", genre_options)
    if st.button("Devam"):
        st.session_state.answers["genre"] = genre
        st.session_state.step += 1

elif st.session_state.step == 2:
    st.subheader("2. En son okuduÄŸunuz kitaplar hangileri?")
    recent_books = st.text_input("Son okuduÄŸunuz kitaplarÄ± yazÄ±n")
    if st.button("Devam"):
        st.session_state.answers["recent_books"] = recent_books
        st.session_state.step += 1

elif st.session_state.step == 3:
    st.subheader("3. GÃ¼nde ne kadar sÃ¼re kitap okuyorsunuz?")
    # Change the input to a selectbox (dropdown menu)
    reading_habits = st.selectbox(
        "GÃ¼nde ne kadar sÃ¼re kitap okuyorsunuz?", reading_habits_options
    )

    if st.button("Devam"):
        st.session_state.answers["reading_habits"] = reading_habits
        st.session_state.step += 1


elif st.session_state.step == 4:
    st.subheader("4. Favori yazarÄ±nÄ±z kim?")
    favorite_author = st.text_input("Favori yazarÄ±nÄ±zÄ± yazÄ±n")
    if st.button("Kitap Ã–nerisi Al"):
        st.session_state.answers["favorite_author"] = favorite_author
        st.session_state.step += 1

elif st.session_state.step == 5:
    with st.spinner("Kitap Ã¶nerileriniz hazÄ±rlanÄ±yor..."):
        answers = st.session_state.answers
        response_text = recommend_books(
            answers["genre"],
            answers["recent_books"],
            answers["reading_habits"],
            answers["favorite_author"],
        )
        recommendations = parse_recommendations(response_text)

        for idx, book in enumerate(recommendations, start=1):
            st.markdown(f"### ğŸ“– Kitap {idx}: {book['name']}")
            st.markdown(f"**AÃ§Ä±klama:** {book['summary']}")
            st.markdown("---")
